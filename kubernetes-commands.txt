kubectl get nodes : get all running nodes in the cluster (Master + worker)

kubectl get all : gives a list of all kubernetes objects running like deployments,replicas,pods,services etc.

k get all --all-namespaces: list of resources in all namespace

k get all -n <namespace> : show resources in that particular namespace

kubectl cluster-info : gives the cluster information

kubectl exec <podname> -- <command to run in pods>
ex: kubectl exec <podname> -- curl -s http://100.10.9.87
(Everything after the double dash (--) is the command that should be executed inside the pod.)

kubectl exec -it <pod name> bash : gives access to the bash shell of the container running inside
the pod.

kubectl exec -it my-pod --container <container name> --/bin/bash : if a pod is running more 
than one container, then getting access to the bash of one of the container

kubectl exec <podname> env -> this will get the environment variables of the pod

kubectl run --generator=run-pod/v1 --rm utils -it --image eddiehale/utils bash -> this will run an utils pod to run commands
like nslookup etc, and give you access to container shell to run commands and test in the cluster.
This will get deleted when "exit" command is run on the container.

# to get a list of resources that are namespaced and that are not namespaced.
kubectl api-resources --namespaced=true
kubectl api-resources --namespaced=false

# namespace
kubectl create namespace test --> creates a test namespace
kubectl get namespace-> lists all the namespaces in the cluster

## POD Commands:

kubectl get pods -> get all running pods

kubectl get pods -w  -> will wait and watch the pods, you can see the status of pods changing

kubectl desc pods -> gives all the details about the running pods , like image running, which worker node it is running, container id , etc.

kubectl get pods -o wide -> gives the information of the pods running in which node and the ip address of the node.

kubectl create -f <pod-definition file name> -> runs a pod definition file to create pods and containers inside it.

kubectl delete pod <pod name> -> will delete the pod with that name
kubectl delete pod/<podname>

kubectl delete -f <pod-definition file name> -> will delete all pods created from that file.

kubectl logs -f <pod name> : shows the logs of the container with live refresh (because of -f option)
kubectl exec <pod name> cat <log location> : show the logs of the container by running the command inside the running container
kubectl exec <pod name> <command> <arguments> : to run any command in a running container inside a pod

## replica set commands:

kubectl create -f <replica set definition file name>
kubectl replace -f <replica set definition file name>
kubectl scale --replicas=6 -f <replica set definition file name>
kubectl scale --replicas=6 replicaset <replica set name>
kubectl scale --replicas=<expected_replica_num> deployment <deployment_label_name>
kubectl delete replicaset <replicaset name>
kubectl describe replicaset
kubectl get replicaset
kubectl get replicaset <replica set name> -o yaml > replicaset.yaml - this will create a replicaset.yaml file from the 
replicaset.

## Services
To connect to a service in another namespace you can connect by two ways
1) Using the Fully Qualified DNS name (fqdn) like <service name>.<namespace>.svc.cluster.local
2) Or by just calling <servicename>.<namespace>

## Persistent Volumes:
kubectl get pv -> gets list of persistent volumes
kubectl get pv/<pv-name>

kubectl get pvc -> gets list of persistent volume claims

kubect get sc -> gets list of storage classes

## Deployment Commands:

kubectl create -f <deployment-definition file name> - will create the deployment with all pods, replicasets, deployment 
objects etc.

kubectl create -f <deployment-definition file name> --record - will record the deployment from here on and any changes
in the deployment will be shown as a list on firing the history command below.

kubectl rollout history deployment/<deployment name> - will show the deployment history.

kubectl rollout status deployment/<deployment name> - wills show the current status of deployment

kubectl rollout undo deployment/<deployment name> - this will reset the deployment to the previous deployment.

kubectl apply -f <deployment definition file name> - will update the existing deployment with the changes in the file.

kubectl get deployments - will show a list of all deployments.

kubectl describe deployment - will show the detail of deployment

kubectl delete deployment <deployment name> - will delete the deployment, pods, replica sets, etc.

kubectl delete -f <deployment file name> - will delete the deployment, pods, replica sets, etc.


kubectl set image deployment/<deployment name> <image name> - will do a new deployment will updated image. This will 
only update the current deployment on the fly, and not the deployment file.

kubectl run <deployment name> --image=<image name> - this is another way to create a deployment directly without a deployment defintion file.
ex: kubectl run nginx-deployment --image=nginx


## RBAC
kubectl get roles -> to get roles present in the namespace

kubectl get rolebindings -> to get rolebindings

kubectl describe role <role name> -> to get details about the role.

kubectl describe rolebinding <role name> -> to get details about the role binding

kubectl auth can-i create deployments -> checks if the logged in user can create deployments or not.

kubectl auth can-i delete nodes -> checks if the logged in user can delete nodes or not.

#As administrator user logged in, one can check if a particular user has access to perform an action.
kubectl auth can-i create deployments --as dev-user -> checks if dev user can create deployments or not

kubectl create serviceaccount <service account name> -> creates a service account

kubectl get serviceaccount -> this will list all the service accounts

kubectl describe serviceaccount <service account name> -> this will give details about a service account






